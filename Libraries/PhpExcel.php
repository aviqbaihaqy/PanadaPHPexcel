<?php
namespace Libraries;
use Resources;

class PhpExcel {
    
    public function __construct(){
        Resources\Import::composer();
    }
	
	public function ReadXlsSeveral($inputFileName,$args=array()){
		$data = array();
		$default = array(
			"inputFileType" => "Excel5",
			"sheetName" => array("sheet1"),
			"format" => array()
		);
		$args = array_merge($default, $args);
		
		$objReader = \PHPExcel_IOFactory::createReader($args['inputFileType']);
		$objReader->setLoadSheetsOnly($args['sheetName']);
		$objPHPExcel = $objReader->load($inputFileName);
		
		$namedDataArray = array();
		foreach ($objPHPExcel->getWorksheetIterator() as $worksheet) {
			$sheetName		  	= $worksheet->getTitle();
			$highestRow         = $worksheet->getHighestRow(); // e.g. 10
			$highestColumn      = $worksheet->getHighestColumn(); // e.g 'F'
			$highestColumnIndex = \PHPExcel_Cell::columnIndexFromString($highestColumn);
			$nrColumns = ord($highestColumn) - 64;
			
			$headingsArray = $worksheet->rangeToArray('A1:'.$highestColumn.'1',null, true, true, true);
			$headingsArray = $headingsArray[1];
		
			$r = -1;
			for ($row = 2; $row <= $highestRow; ++$row) {
				$dataRow = $worksheet->rangeToArray('A'.$row.':'.$highestColumn.$row,null, true, false, true);
				if ((isset($dataRow[$row]['A'])) && ($dataRow[$row]['A'] > '')) {
					++$r;
					foreach($headingsArray as $columnKey => $columnHeading) {
						$namedDataArray[$r][$columnHeading] = $dataRow[$row][$columnKey];
						if ((!empty($args['format'])) && (in_array($columnHeading,$args['format'])) )
							$namedDataArray[$r][$columnHeading] = $this->FormatArray($dataRow[$row][$columnKey]);
					}
				}
			}
		}
		return $namedDataArray;
	}
	
	public function ReadXls($inputFileName,$args=array()){
		$objReader = \PHPExcel_IOFactory::load($inputFileName);

		$data = array();
		foreach ($objReader->getWorksheetIterator() as $worksheet) {
			$sheetName		   	= $worksheet->getTitle();
			$highestRow         = $worksheet->getHighestRow(); // e.g. 10
			$highestColumn      = $worksheet->getHighestColumn(); // e.g 'F'
			$highestColumnIndex = \PHPExcel_Cell::columnIndexFromString($highestColumn);
			$nrColumns = ord($highestColumn) - 64;
			
			$headingsArray = $worksheet->rangeToArray('A1:'.$highestColumn.'1',null, true, true, true);
			$headingsArray = $headingsArray[1];
		
			$r = -1;
			$namedDataArray = array();
			for ($row = 2; $row <= $highestRow; ++$row) {
				$dataRow = $worksheet->rangeToArray('A'.$row.':'.$highestColumn.$row,null, true, false, true);
				if ((isset($dataRow[$row]['A'])) && ($dataRow[$row]['A'] > '')) {
					++$r;
					foreach($headingsArray as $columnKey => $columnHeading) {
						$namedDataArray[$r][$columnHeading] = $dataRow[$row][$columnKey];
						if ((!empty($args)) && (in_array($columnHeading,$args)) )
							$namedDataArray[$r][$columnHeading] = $this->FormatArray($dataRow[$row][$columnKey]);
					}
				}
			}
			$data = array_merge($data,$namedDataArray);
		}
		return $data;
	}
	
	private function FormatArray($data){
		$PHPDateTimeObject = \PHPExcel_Shared_Date::ExcelToPHPObject($data);
		return $PHPDateTimeObject->format('Y-m-d');
	}
	
	public function WriteXls($args=array()){
		$default = array(
			'properties' => array('Creator'=>null,
								'LastModifiedBy'=>null,
								'Title'=>null,
								'Subject'=>null,
								'Description'=>null,
								'Keywords'=>null,
								'Category'=>null
							),
			'filename' => 'dataexcel.xls',
			'format' => 'Excel5',
			'rowData'=>array(),
			'columnName'=>array()
		);
		$args = array_merge($default, $args);

		$objPHPExcel = new \PHPExcel;		
		$objPHPExcel->getProperties()->setCreator("ThinkPHP")
                ->setLastModifiedBy("Daniel Schlichtholz")
                ->setTitle("Office 2007 XLSX Test Document")
                ->setSubject("Office 2007 XLSX Test Document")
                ->setDescription("Test doc for Office 2007 XLSX, generated by PHPExcel.")
                ->setKeywords("office 2007 openxml php")
                ->setCategory("Test result file");
	
		// First Row (column Names)
		$objPHPExcel->setActiveSheetIndex(0);
		/*
		$j=0;
		foreach($args['columnName'] as $row){
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow ($j,1,$row->Field);
			$j++;
		}
		*/
		// Other Rows (Data)
		$i = 2;
		foreach($args['rowData'] as $row) {
			$k=0;
			foreach ($row as $col=>$dado) {
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow ($k,1,$col);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow ($k,$i,$dado);
				$k++;
			}
			$i++;
		}
		
		header('Content-Type: application/vnd.ms-excel'); //mime type
		header('Content-Disposition: attachment;filename="'.$args['filename'].'"'); //tell browser what's the file name
		header('Cache-Control: max-age=0'); //no cache
		//save it to Excel5 format (excel 2003 .XLS file), change this to 'Excel2007' (and adjust the filename extension, also the header mime type)
		//if you want to save it as .XLSX Excel 2007 format
		$objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, $args['format']);  
		//force user to download the Excel file without writing it to server's HD
		$objWriter->save('php://output');
		exit;
	}
}